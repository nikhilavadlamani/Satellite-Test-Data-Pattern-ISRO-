/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */


#include "xil_io.h"
#include "xil_exception.h"
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include "string.h"
#include "xgpio.h"
#include "xgpio_l.h"
#include "xparameters.h"
#include "xil_types.h"
#include "xio.h"
#include <unistd.h>
#include "xil_printf.h"


// Define LCD control pins
#define LCD_RS 6
#define LCD_RW 5
#define LCD_E  4
#define LCD_DB7 3
#define LCD_DB6 2
#define LCD_DB5 1
#define LCD_DB4 0

#define LCD_delay 400
#define LCD_delay_1 100
#define LCD_delay_2 2000000
#define LCD_delay_3 10000
#define LCD_delay_4 45
#define LCD_delay_5 14


// Define LED control pins
#define LED_1_CHANNEL 1
#define LED_2_CHANNEL 2
#define LED_3_CHANNEL 4
#define LED_4_CHANNEL 8
#define LED_5_CHANNEL 16
#define LED_6_CHANNEL 32
#define LED_7_CHANNEL 64
#define LED_8_CHANNEL 128

#define XIL_PRINTF_H

// Function prototypes
void lcd_init();
void lcd_cmd(uint16_t cmd);
void lcd_cmd_high_nibble(uint16_t cmd);
void lcd_data(uint16_t data);
void lcd_data1();												//Modified


uint16_t data = 0x00;
int i;
char str1;
char names[16];														//Modified

int main()
{
    XGpio dip_switches, leds, lcd;
    volatile int Delay;
    u32 dip_value = 0;
    u32 leds_value = 0xF0F0F0F0;

    // Initialise dip switches
    XGpio_Initialize(&dip_switches, XPAR_DIP_SWITCHES_8BITS_DEVICE_ID);
    XGpio_SetDataDirection(&dip_switches, 1, 0xFFFFFFFF);

    // Initialise LEDs
    XGpio_Initialize(&leds, XPAR_LEDS_8BITS_DEVICE_ID);
    leds.BaseAddress = XPAR_LEDS_8BITS_BASEADDR;
    XGpio_SetDataDirection(&leds, 1, 0x00000000);

    //Initialize LCD
    XGpio_Initialize(&lcd, XPAR_LCD_DEVICE_ID);
    lcd.BaseAddress = XPAR_LCD_BASEADDR;
    XGpio_SetDataDirection(&lcd, 1, 0x00000000);

    lcd_init();
    lcd_data(str1);
    // Display the name on LCD using lcd_data1 function
	strcpy(names,"Carto2C");

	//Modified
    lcd_data1(&names);												//Modified


    // Read dip switch values and update LED state

    while (1)
    {
        // Read dip switch value
        dip_value = XGpio_DiscreteRead(&dip_switches, 1);

        // Use if statements to assign each dip switch bit to the corresponding LED
        if (dip_value & 0x01)
            leds_value |= 0x01; // turn on LED 1
        else
            leds_value &= ~0x01; // turn off LED 1
        if ((dip_value & 0x02) == 2)
            leds_value |= 2;
        else
            leds_value &= ~0x02;
        if ((dip_value & 0x04) == 4)
            leds_value |= 4;
        else
            leds_value &= ~0x04;
        if ((dip_value & 0x08) == 8)
            leds_value |= 8;
        else
            leds_value &= ~0x08;
        if ((dip_value & 0x10) == 16)
            leds_value |= 16;
        else
            leds_value &= ~0x10;
        if ((dip_value & 0x20) == 32)
            leds_value |= 32;
        else
            leds_value &= ~0x20;
        if ((dip_value & 0x40) == 64)
            leds_value |= 64;
        else
            leds_value &= ~0x40;
        if ((dip_value & 0x80) == 128)
            leds_value |= 128;
        else
            leds_value &= ~0x80;

        XIo_Out32(XPAR_LEDS_8BITS_BASEADDR, leds_value);

        //dip switvh selctio code

        // Read the state of dip switches
            //int dip_value1 = XGpio_DiscreteRead(&dip_switches, 1) & 0x01;
            //int dip_value2 =(XGpio_DiscreteRead(&dip_switches, 1) >> 1) & 0x01;
	    dip_value = XGpio_DiscreteRead(&dip_switches, 1);							//Modified


            // Determine which name to display based on the state of dip switches
            switch(dip_value)
            {
                case 0: // dip1 and dip2 are low
                    strcpy(names, "Carto2C ");
                    break;

                case 1: // dip1 is high and dip2 is low
                    strcpy(names, "Carto3  ");
                    break;

                case 2: // dip1 is low and dip2 is high
                    strcpy(names, "ScatSat1");
                    break;

                case 3: // dip1 and dip2 are high
                    strcpy(names, "RISAT1A ");
                    break;

                default:
                    // This should never happen, but just in case
                    strcpy(names, "ERROR  ");
                    break;
            }

	    // Set cursor to the head of the 2nd line							//Modified
           uint16_t data_second_line = 0x80 | 0x40; // command to set DDRAM address to 0x40
           uint16_t data_high = (data_second_line & 0xF0) >> 4;
           data_high &= ~(1 << LCD_RS); // clear RS bit to send command
           XGpio_DiscreteWrite(&lcd, 1, data_high);
           for (Delay = 0; Delay < ((LCD_delay_2) / 2); Delay++)  // 10ms delay
           data_high |= (1 << LCD_E);
           XGpio_DiscreteWrite(&lcd, 1, data_high);
           for (Delay = 0; Delay < LCD_delay_4; Delay++)  // 0.45 us delay
           data_high &= ~(1 << LCD_E);
           XGpio_DiscreteWrite(&lcd, 1, data_high);


           uint16_t data_low = (data_second_line & 0xF0);
           data_low &= ~(1 << LCD_RS); // clear RS bit to send command
           XGpio_DiscreteWrite(&lcd, 1, data_low);
           for (Delay = 0; Delay < ((LCD_delay_2) / 2); Delay++)  // 10ms delay
           data_low |= (1 << LCD_E);
           XGpio_DiscreteWrite(&lcd, 1, data_low);
           for (Delay = 0; Delay < LCD_delay_4; Delay++)  // 0.45 us delay
           data_low &= ~(1 << LCD_E);
           XGpio_DiscreteWrite(&lcd, 1, data_low);

	   lcd_data1(&names);											//Modified

    }
}


// Initialise LCD
void lcd_init()
{

    XGpio lcd;
    XGpio_Initialize(&lcd, XPAR_GPIO_0_DEVICE_ID);
    XGpio_SetDataDirection(&lcd, 1, 0);

    // wait for power up      //40msec
    volatile int Delay;
    for (Delay = 0; Delay < ((LCD_delay_2)*2); Delay++);

    lcd_cmd_high_nibble(0x30);

    //10msec
    for (Delay = 0; Delay < ((LCD_delay_2)/2); Delay++);

    lcd_cmd_high_nibble(0x30);

    //1msec
    for (Delay = 0; Delay < ((LCD_delay_2)/20); Delay++);
    lcd_cmd_high_nibble(0x30);
    //1msec
    for (Delay = 0; Delay < ((LCD_delay_2)/20); Delay++);


    lcd_cmd_high_nibble(0x20);
    //1msec
    for (Delay = 0; Delay < ((LCD_delay_2)/20); Delay++);

    lcd_cmd(0x28);
    //10msec
    for (Delay = 0; Delay < ((LCD_delay_2)/2); Delay++);

    lcd_cmd(0x08);
    //10msec
    for (Delay = 0; Delay < ((LCD_delay_2)/2); Delay++);

    lcd_cmd(0x01);
    //10msec
    for (Delay = 0; Delay < ((LCD_delay_2)/2); Delay++);

    lcd_cmd(0x06);
    //10msec
    for (Delay = 0; Delay < ((LCD_delay_2)/2); Delay++);

    lcd_cmd(0x0F);
    //10msec
    for (Delay = 0; Delay < ((LCD_delay_2)/2); Delay++);


}


// Send command to LCD
void lcd_cmd_high_nibble(uint16_t cmd)
{
    XGpio lcd;
    XGpio_Initialize(&lcd, XPAR_LCD_DEVICE_ID);
    XGpio_SetDataDirection(&lcd, 1, 0);
    volatile int Delay;
    uint16_t data = (cmd >> 4) & 0x0F;
    //data |= (1 << LCD_RS);
    //data &= ~(1 << LCD_RW);
    XGpio_DiscreteWrite(&lcd, 1, data);
    for ( Delay = 0; Delay < LCD_delay_5; Delay++);    //0.14 us
    data |= (1 << LCD_E);
    XGpio_DiscreteWrite(&lcd, 1, data);
    for ( Delay = 0; Delay < LCD_delay_4; Delay++);    //0.45 us
    data &= ~(1 << LCD_E);
    XGpio_DiscreteWrite(&lcd, 1, data);

}

// Send command to LCD
void lcd_cmd(uint16_t cmd)
{
    XGpio lcd;
    XGpio_Initialize(&lcd, XPAR_LCD_DEVICE_ID);
    XGpio_SetDataDirection(&lcd, 1, 0);
    volatile int Delay;
    uint16_t data = (cmd >> 4) & 0x0F;
    //data |= (1 << LCD_RS);
    //data &= ~(1 << LCD_RW);
    XGpio_DiscreteWrite(&lcd, 1, data);
    for ( Delay = 0; Delay < LCD_delay_5; Delay++);    //0.14 us
    data |= (1 << LCD_E);
    XGpio_DiscreteWrite(&lcd, 1, data);
    for ( Delay = 0; Delay < LCD_delay_4; Delay++);    //0.45 us
    data &= ~(1 << LCD_E);
    XGpio_DiscreteWrite(&lcd, 1, data);

    data = (cmd & 0x0F);
    //data |= (1 << LCD_RS);
    //data &= ~(1 << LCD_RW);
    XGpio_DiscreteWrite(&lcd, 1, data);
    for ( Delay = 0; Delay < LCD_delay_5; Delay++);    //0.14 us
    data |= (1 << LCD_E);
    XGpio_DiscreteWrite(&lcd, 1, data);
    for ( Delay = 0; Delay < LCD_delay_4; Delay++);    //0.45 us
    data &= ~(1 << LCD_E);
    XGpio_DiscreteWrite(&lcd, 1, data);
}

// Send data to LCD
void lcd_data(uint16_t data)
{
    XGpio lcd;
    const char str1[] = "SATELLITE NAME";
    int len1 = strlen(str1);
    int i;
    XGpio_Initialize(&lcd, XPAR_LCD_DEVICE_ID);
    XGpio_SetDataDirection(&lcd, 1, 0);
    volatile int Delay;

    // display satellite name on the first line
    for (i = 0; i < len1; i++)
    {
        uint16_t letter = str1[i];

        //high nibble
        uint16_t high = (letter & 0xF0) >> 4;
        high |= (1 << LCD_RS);
        XGpio_DiscreteWrite(&lcd, 1, high);
        for (Delay = 0; Delay < ((LCD_delay_2) / 2); Delay++); // 10ms delay
        high |= (1 << LCD_E);
        XGpio_DiscreteWrite(&lcd, 1, high);
        for (Delay = 0; Delay < LCD_delay_4; Delay++);  // 0.45 us delay
        high &= ~(1 << LCD_E);
        XGpio_DiscreteWrite(&lcd, 1, high);

        //low nibble
        uint16_t low = (letter & 0x0F);
        low |= (1 << LCD_RS);
        XGpio_DiscreteWrite(&lcd, 1, low);
        for (Delay = 0; Delay < ((LCD_delay_2) / 2); Delay++); // 10ms delay
        low |= (1 << LCD_E);
        XGpio_DiscreteWrite(&lcd, 1, low);
        for (Delay = 0; Delay < LCD_delay_4; Delay++); // 0.45 us delay
        low &= ~(1 << LCD_E);
        XGpio_DiscreteWrite(&lcd, 1, low);



    }
    // Set cursor to the head of the 2nd line
           uint16_t data_second_line = 0x80 | 0x40; // command to set DDRAM address to 0x40
           uint16_t data_high = (data_second_line & 0xF0) >> 4;
           data_high &= ~(1 << LCD_RS); // clear RS bit to send command
           XGpio_DiscreteWrite(&lcd, 1, data_high);
           for (Delay = 0; Delay < ((LCD_delay_2) / 2); Delay++)  // 10ms delay
           data_high |= (1 << LCD_E);
           XGpio_DiscreteWrite(&lcd, 1, data_high);
           for (Delay = 0; Delay < LCD_delay_4; Delay++)  // 0.45 us delay
           data_high &= ~(1 << LCD_E);
           XGpio_DiscreteWrite(&lcd, 1, data_high);


           uint16_t data_low = (data_second_line & 0xF0);
           data_low &= ~(1 << LCD_RS); // clear RS bit to send command
           XGpio_DiscreteWrite(&lcd, 1, data_low);
           for (Delay = 0; Delay < ((LCD_delay_2) / 2); Delay++)  // 10ms delay
           data_low |= (1 << LCD_E);
           XGpio_DiscreteWrite(&lcd, 1, data_low);
           for (Delay = 0; Delay < LCD_delay_4; Delay++)  // 0.45 us delay
           data_low &= ~(1 << LCD_E);
           XGpio_DiscreteWrite(&lcd, 1, data_low);
}
void lcd_data1(char *name)
{
    XGpio lcd;
    int k;

    char msg[16];
    XGpio_Initialize(&lcd, XPAR_LCD_DEVICE_ID);
    XGpio_SetDataDirection(&lcd, 1, 0);
    volatile int Delay;

        for (k = 0; k < strlen(name) ; k++)
        {

                msg[k] = name[k];
				// HIGH NIBBLE
				uint16_t letter1 = msg[k];
				uint16_t high = (letter1 & 0xF0) >> 4;
				high |= (1 << LCD_RS);
				XGpio_DiscreteWrite(&lcd, 1, high);
				for (Delay = 0; Delay < ((LCD_delay_2) / 2); Delay++);  // 10ms delay
				high |= (1 << LCD_E);
				XGpio_DiscreteWrite(&lcd, 1, high);
				for (Delay = 0; Delay < LCD_delay_4; Delay++);  // 0.45 us delay
				high &= ~(1 << LCD_E);
				XGpio_DiscreteWrite(&lcd, 1, high);

				// LOW NIBBLE
				uint16_t low = (letter1 & 0x0F);
				low |= (1 << LCD_RS);
				XGpio_DiscreteWrite(&lcd, 1, low);
				for (Delay = 0; Delay < ((LCD_delay_2) / 2); Delay++);  // 10ms delay
				low |= (1 << LCD_E);
				XGpio_DiscreteWrite(&lcd, 1, low);
				for (Delay = 0; Delay < LCD_delay_4; Delay++);  // 0.45 us delay
				low &= ~(1 << LCD_E);
				XGpio_DiscreteWrite(&lcd, 1, low);


        }

}
